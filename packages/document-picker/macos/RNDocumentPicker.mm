// LICENSE: see License.md in the package root


#import "RNDocumentPicker.h"

#import "RCTConvert+RNDocumentPicker.h"
// this header file is generated by Xcode: https://developer.apple.com/documentation/swift/importing-swift-into-objective-c
// if it cannot be found, try cleaning the build folder and Xcode derived data folder

// When using use_frameworks! :linkage => :static in Podfile
#if __has_include(<react_native_document_picker/react_native_document_picker-Swift.h>)
#import <react_native_document_picker/react_native_document_picker-Swift.h>
#else
#import "react_native_document_picker-Swift.h"
#endif

@interface RNDocumentPicker ()
@end

@implementation RNDocumentPicker {
  DocPicker *docPicker;
  DocSaver *docSaver;
}

- (instancetype)init {
  if ((self = [super init])) {
    docPicker = [DocPicker new];
    docSaver = [DocSaver new];
  }
  return self;
}

+ (BOOL)requiresMainQueueSetup {
  return NO;
}

RCT_EXPORT_MODULE()

RCT_EXPORT_METHOD(pick:
                  (NSDictionary *) options
                  resolve:
                  (RCTPromiseResolveBlock) resolve
                  reject:
                  (RCTPromiseRejectBlock) reject)
{
  PickerOptions *pickerOptions = [RCTConvert PickerOptions:options];
  [docPicker present:pickerOptions resolve:resolve reject:reject];
}

RCT_EXPORT_METHOD(pickDirectory:
                  (NSDictionary *) options
                  resolve:
                  (RCTPromiseResolveBlock) resolve
                  reject:
                  (RCTPromiseRejectBlock) reject)
{
  PickerOptions *pickerOptions = [RCTConvert PickerOptions:options];
  [docPicker presentDirectory:pickerOptions resolve:resolve reject:reject];
}

RCT_EXPORT_METHOD(saveDocument:
                  (NSDictionary *) options
                  resolve:
                  (RCTPromiseResolveBlock) resolve
                  reject:
                  (RCTPromiseRejectBlock) reject)
{
  SaverOptions *saverOptions = [RCTConvert SaverOptions:options];
  [docSaver present:saverOptions resolve:resolve reject:reject];
}

RCT_EXPORT_METHOD(releaseSecurityScopedResource:
                  (NSString *) uri
                  resolve:
                  (RCTPromiseResolveBlock) resolve
                  reject:
                  (RCTPromiseRejectBlock) reject)
{
  NSURL *url = [NSURL URLWithString:uri];
  if (url == nil) {
    reject(@"INVALID_URI", @"Invalid URI provided", nil);
    return;
  }
  
  [url stopAccessingSecurityScopedResource];
  resolve(@(YES));
}

RCT_EXPORT_METHOD(isKnownType:
                  (NSString *) type
                  resolve:
                  (RCTPromiseResolveBlock) resolve
                  reject:
                  (RCTPromiseRejectBlock) reject)
{
  BOOL isKnown = [IsKnownTypeImpl isKnownType:type];
  resolve(@(isKnown));
}

#ifdef RCT_NEW_ARCH_ENABLED
- (std::shared_ptr<facebook::react::TurboModule>)getTurboModule:
    (const facebook::react::ObjCTurboModule::InitParams &)params
{
  return std::make_shared<facebook::react::NativeDocumentPickerSpecJSI>(params);
}
#endif

@end